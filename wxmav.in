#! @PYTHON@
# coding=utf-8
#
# Small program to be installed in e.g. PATH, while real
# program is in a python package directory and accessible
# by import -- this version is written for Unix-like systems
# that grok the shebang ("#! /path/interpreter").
#
# Copyright (C) 2017 Ed Hynan
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#  MA 02110-1301, USA.
#

_inst_py_dir = r"@pythondir@"
_x_help_path = r"@XHELPERPATH@"

import os
import sys

osuname = os.uname()
if (osuname[0] == 'OpenBSD' and float(osuname[2]) < 6.2 and
    (osuname[4] == 'amd64' or osuname[4] == 'i386')):
    # exec self with LD_PRELOAD in environment as workaround
    # for both libestdc++ and libstdc++ being linked by code
    # here and there
    obsdhackopt = '!@openbsd-estdc++hack@!'
    if len(sys.argv) > 1 and sys.argv[1] == obsdhackopt:
        print("EXEC'd with hack")
        del sys.argv[1]
        del os.environ['LD_PRELOAD']
        del osuname
        del obsdhackopt
    else:
        stdsonm = 'libestdc++.so'
        os.environ['LD_PRELOAD'] = stdsonm
        sys.argv.insert(1, obsdhackopt)
        os.execve(sys.argv[0], sys.argv, os.environ)

if _inst_py_dir != sys.path[0]:
    sys.path.insert(0, _inst_py_dir)

from wxmav_main import wxmav_main

if __name__ == '__main__':
    sys.exit(wxmav_main(argv = sys.argv, x_help_path = _x_help_path))
